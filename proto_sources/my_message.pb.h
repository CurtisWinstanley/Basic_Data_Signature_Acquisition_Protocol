// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_my_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_my_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_my_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_my_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_my_5fmessage_2eproto;
class AddressBook;
struct AddressBookDefaultTypeInternal;
extern AddressBookDefaultTypeInternal _AddressBook_default_instance_;
class AddressBook_Person;
struct AddressBook_PersonDefaultTypeInternal;
extern AddressBook_PersonDefaultTypeInternal _AddressBook_Person_default_instance_;
class AddressBook_Person_PhoneNumber;
struct AddressBook_Person_PhoneNumberDefaultTypeInternal;
extern AddressBook_Person_PhoneNumberDefaultTypeInternal _AddressBook_Person_PhoneNumber_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddressBook* Arena::CreateMaybeMessage<::AddressBook>(Arena*);
template<> ::AddressBook_Person* Arena::CreateMaybeMessage<::AddressBook_Person>(Arena*);
template<> ::AddressBook_Person_PhoneNumber* Arena::CreateMaybeMessage<::AddressBook_Person_PhoneNumber>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum AddressBook_Person_PhoneType : int {
  AddressBook_Person_PhoneType_MOBILE = 0,
  AddressBook_Person_PhoneType_HOME = 1,
  AddressBook_Person_PhoneType_WORK = 2
};
bool AddressBook_Person_PhoneType_IsValid(int value);
constexpr AddressBook_Person_PhoneType AddressBook_Person_PhoneType_PhoneType_MIN = AddressBook_Person_PhoneType_MOBILE;
constexpr AddressBook_Person_PhoneType AddressBook_Person_PhoneType_PhoneType_MAX = AddressBook_Person_PhoneType_WORK;
constexpr int AddressBook_Person_PhoneType_PhoneType_ARRAYSIZE = AddressBook_Person_PhoneType_PhoneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressBook_Person_PhoneType_descriptor();
template<typename T>
inline const std::string& AddressBook_Person_PhoneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddressBook_Person_PhoneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddressBook_Person_PhoneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddressBook_Person_PhoneType_descriptor(), enum_t_value);
}
inline bool AddressBook_Person_PhoneType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AddressBook_Person_PhoneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddressBook_Person_PhoneType>(
    AddressBook_Person_PhoneType_descriptor(), name, value);
}
// ===================================================================

class AddressBook_Person_PhoneNumber final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddressBook.Person.PhoneNumber) */ {
 public:
  inline AddressBook_Person_PhoneNumber() : AddressBook_Person_PhoneNumber(nullptr) {}
  ~AddressBook_Person_PhoneNumber() override;
  explicit PROTOBUF_CONSTEXPR AddressBook_Person_PhoneNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressBook_Person_PhoneNumber(const AddressBook_Person_PhoneNumber& from);
  AddressBook_Person_PhoneNumber(AddressBook_Person_PhoneNumber&& from) noexcept
    : AddressBook_Person_PhoneNumber() {
    *this = ::std::move(from);
  }

  inline AddressBook_Person_PhoneNumber& operator=(const AddressBook_Person_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressBook_Person_PhoneNumber& operator=(AddressBook_Person_PhoneNumber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressBook_Person_PhoneNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressBook_Person_PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const AddressBook_Person_PhoneNumber*>(
               &_AddressBook_Person_PhoneNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddressBook_Person_PhoneNumber& a, AddressBook_Person_PhoneNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressBook_Person_PhoneNumber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressBook_Person_PhoneNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressBook_Person_PhoneNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressBook_Person_PhoneNumber>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressBook_Person_PhoneNumber& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddressBook_Person_PhoneNumber& from) {
    AddressBook_Person_PhoneNumber::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressBook_Person_PhoneNumber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddressBook.Person.PhoneNumber";
  }
  protected:
  explicit AddressBook_Person_PhoneNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required string number = 1;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // optional .AddressBook.Person.PhoneType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::AddressBook_Person_PhoneType type() const;
  void set_type(::AddressBook_Person_PhoneType value);
  private:
  ::AddressBook_Person_PhoneType _internal_type() const;
  void _internal_set_type(::AddressBook_Person_PhoneType value);
  public:

  // @@protoc_insertion_point(class_scope:AddressBook.Person.PhoneNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_my_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class AddressBook_Person final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddressBook.Person) */ {
 public:
  inline AddressBook_Person() : AddressBook_Person(nullptr) {}
  ~AddressBook_Person() override;
  explicit PROTOBUF_CONSTEXPR AddressBook_Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressBook_Person(const AddressBook_Person& from);
  AddressBook_Person(AddressBook_Person&& from) noexcept
    : AddressBook_Person() {
    *this = ::std::move(from);
  }

  inline AddressBook_Person& operator=(const AddressBook_Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressBook_Person& operator=(AddressBook_Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressBook_Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressBook_Person* internal_default_instance() {
    return reinterpret_cast<const AddressBook_Person*>(
               &_AddressBook_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddressBook_Person& a, AddressBook_Person& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressBook_Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressBook_Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressBook_Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressBook_Person>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressBook_Person& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddressBook_Person& from) {
    AddressBook_Person::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressBook_Person* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddressBook.Person";
  }
  protected:
  explicit AddressBook_Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AddressBook_Person_PhoneNumber PhoneNumber;

  typedef AddressBook_Person_PhoneType PhoneType;
  static constexpr PhoneType MOBILE =
    AddressBook_Person_PhoneType_MOBILE;
  static constexpr PhoneType HOME =
    AddressBook_Person_PhoneType_HOME;
  static constexpr PhoneType WORK =
    AddressBook_Person_PhoneType_WORK;
  static inline bool PhoneType_IsValid(int value) {
    return AddressBook_Person_PhoneType_IsValid(value);
  }
  static constexpr PhoneType PhoneType_MIN =
    AddressBook_Person_PhoneType_PhoneType_MIN;
  static constexpr PhoneType PhoneType_MAX =
    AddressBook_Person_PhoneType_PhoneType_MAX;
  static constexpr int PhoneType_ARRAYSIZE =
    AddressBook_Person_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PhoneType_descriptor() {
    return AddressBook_Person_PhoneType_descriptor();
  }
  template<typename T>
  static inline const std::string& PhoneType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PhoneType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PhoneType_Name.");
    return AddressBook_Person_PhoneType_Name(enum_t_value);
  }
  static inline bool PhoneType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PhoneType* value) {
    return AddressBook_Person_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPhonesFieldNumber = 5,
    kNameFieldNumber = 1,
    kEmailFieldNumber = 3,
    kIdFieldNumber = 2,
    kPhoneTypeFieldNumber = 4,
  };
  // repeated .AddressBook.Person.PhoneNumber phones = 5;
  int phones_size() const;
  private:
  int _internal_phones_size() const;
  public:
  void clear_phones();
  ::AddressBook_Person_PhoneNumber* mutable_phones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person_PhoneNumber >*
      mutable_phones();
  private:
  const ::AddressBook_Person_PhoneNumber& _internal_phones(int index) const;
  ::AddressBook_Person_PhoneNumber* _internal_add_phones();
  public:
  const ::AddressBook_Person_PhoneNumber& phones(int index) const;
  ::AddressBook_Person_PhoneNumber* add_phones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person_PhoneNumber >&
      phones() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string email = 3;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional .AddressBook.Person.PhoneType phone_type = 4;
  bool has_phone_type() const;
  private:
  bool _internal_has_phone_type() const;
  public:
  void clear_phone_type();
  ::AddressBook_Person_PhoneType phone_type() const;
  void set_phone_type(::AddressBook_Person_PhoneType value);
  private:
  ::AddressBook_Person_PhoneType _internal_phone_type() const;
  void _internal_set_phone_type(::AddressBook_Person_PhoneType value);
  public:

  // @@protoc_insertion_point(class_scope:AddressBook.Person)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person_PhoneNumber > phones_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    int32_t id_;
    int phone_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_my_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class AddressBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddressBook) */ {
 public:
  inline AddressBook() : AddressBook(nullptr) {}
  ~AddressBook() override;
  explicit PROTOBUF_CONSTEXPR AddressBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressBook(const AddressBook& from);
  AddressBook(AddressBook&& from) noexcept
    : AddressBook() {
    *this = ::std::move(from);
  }

  inline AddressBook& operator=(const AddressBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressBook& operator=(AddressBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressBook* internal_default_instance() {
    return reinterpret_cast<const AddressBook*>(
               &_AddressBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddressBook& a, AddressBook& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddressBook& from) {
    AddressBook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddressBook";
  }
  protected:
  explicit AddressBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AddressBook_Person Person;

  // accessors -------------------------------------------------------

  enum : int {
    kPeopleFieldNumber = 1,
  };
  // repeated .AddressBook.Person people = 1;
  int people_size() const;
  private:
  int _internal_people_size() const;
  public:
  void clear_people();
  ::AddressBook_Person* mutable_people(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person >*
      mutable_people();
  private:
  const ::AddressBook_Person& _internal_people(int index) const;
  ::AddressBook_Person* _internal_add_people();
  public:
  const ::AddressBook_Person& people(int index) const;
  ::AddressBook_Person* add_people();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person >&
      people() const;

  // @@protoc_insertion_point(class_scope:AddressBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person > people_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_my_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddressBook_Person_PhoneNumber

// required string number = 1;
inline bool AddressBook_Person_PhoneNumber::_internal_has_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddressBook_Person_PhoneNumber::has_number() const {
  return _internal_has_number();
}
inline void AddressBook_Person_PhoneNumber::clear_number() {
  _impl_.number_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddressBook_Person_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:AddressBook.Person.PhoneNumber.number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressBook_Person_PhoneNumber::set_number(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AddressBook.Person.PhoneNumber.number)
}
inline std::string* AddressBook_Person_PhoneNumber::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:AddressBook.Person.PhoneNumber.number)
  return _s;
}
inline const std::string& AddressBook_Person_PhoneNumber::_internal_number() const {
  return _impl_.number_.Get();
}
inline void AddressBook_Person_PhoneNumber::_internal_set_number(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.number_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressBook_Person_PhoneNumber::_internal_mutable_number() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.number_.Mutable(GetArenaForAllocation());
}
inline std::string* AddressBook_Person_PhoneNumber::release_number() {
  // @@protoc_insertion_point(field_release:AddressBook.Person.PhoneNumber.number)
  if (!_internal_has_number()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.number_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.number_.IsDefault()) {
    _impl_.number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AddressBook_Person_PhoneNumber::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.number_.SetAllocated(number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.number_.IsDefault()) {
    _impl_.number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AddressBook.Person.PhoneNumber.number)
}

// optional .AddressBook.Person.PhoneType type = 2;
inline bool AddressBook_Person_PhoneNumber::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddressBook_Person_PhoneNumber::has_type() const {
  return _internal_has_type();
}
inline void AddressBook_Person_PhoneNumber::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::AddressBook_Person_PhoneType AddressBook_Person_PhoneNumber::_internal_type() const {
  return static_cast< ::AddressBook_Person_PhoneType >(_impl_.type_);
}
inline ::AddressBook_Person_PhoneType AddressBook_Person_PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:AddressBook.Person.PhoneNumber.type)
  return _internal_type();
}
inline void AddressBook_Person_PhoneNumber::_internal_set_type(::AddressBook_Person_PhoneType value) {
  assert(::AddressBook_Person_PhoneType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void AddressBook_Person_PhoneNumber::set_type(::AddressBook_Person_PhoneType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:AddressBook.Person.PhoneNumber.type)
}

// -------------------------------------------------------------------

// AddressBook_Person

// required string name = 1;
inline bool AddressBook_Person::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddressBook_Person::has_name() const {
  return _internal_has_name();
}
inline void AddressBook_Person::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddressBook_Person::name() const {
  // @@protoc_insertion_point(field_get:AddressBook.Person.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressBook_Person::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AddressBook.Person.name)
}
inline std::string* AddressBook_Person::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:AddressBook.Person.name)
  return _s;
}
inline const std::string& AddressBook_Person::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AddressBook_Person::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressBook_Person::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AddressBook_Person::release_name() {
  // @@protoc_insertion_point(field_release:AddressBook.Person.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AddressBook_Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AddressBook.Person.name)
}

// required int32 id = 2;
inline bool AddressBook_Person::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AddressBook_Person::has_id() const {
  return _internal_has_id();
}
inline void AddressBook_Person::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t AddressBook_Person::_internal_id() const {
  return _impl_.id_;
}
inline int32_t AddressBook_Person::id() const {
  // @@protoc_insertion_point(field_get:AddressBook.Person.id)
  return _internal_id();
}
inline void AddressBook_Person::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void AddressBook_Person::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AddressBook.Person.id)
}

// optional string email = 3;
inline bool AddressBook_Person::_internal_has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddressBook_Person::has_email() const {
  return _internal_has_email();
}
inline void AddressBook_Person::clear_email() {
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AddressBook_Person::email() const {
  // @@protoc_insertion_point(field_get:AddressBook.Person.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressBook_Person::set_email(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AddressBook.Person.email)
}
inline std::string* AddressBook_Person::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:AddressBook.Person.email)
  return _s;
}
inline const std::string& AddressBook_Person::_internal_email() const {
  return _impl_.email_.Get();
}
inline void AddressBook_Person::_internal_set_email(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressBook_Person::_internal_mutable_email() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* AddressBook_Person::release_email() {
  // @@protoc_insertion_point(field_release:AddressBook.Person.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AddressBook_Person::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AddressBook.Person.email)
}

// optional .AddressBook.Person.PhoneType phone_type = 4;
inline bool AddressBook_Person::_internal_has_phone_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AddressBook_Person::has_phone_type() const {
  return _internal_has_phone_type();
}
inline void AddressBook_Person::clear_phone_type() {
  _impl_.phone_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::AddressBook_Person_PhoneType AddressBook_Person::_internal_phone_type() const {
  return static_cast< ::AddressBook_Person_PhoneType >(_impl_.phone_type_);
}
inline ::AddressBook_Person_PhoneType AddressBook_Person::phone_type() const {
  // @@protoc_insertion_point(field_get:AddressBook.Person.phone_type)
  return _internal_phone_type();
}
inline void AddressBook_Person::_internal_set_phone_type(::AddressBook_Person_PhoneType value) {
  assert(::AddressBook_Person_PhoneType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.phone_type_ = value;
}
inline void AddressBook_Person::set_phone_type(::AddressBook_Person_PhoneType value) {
  _internal_set_phone_type(value);
  // @@protoc_insertion_point(field_set:AddressBook.Person.phone_type)
}

// repeated .AddressBook.Person.PhoneNumber phones = 5;
inline int AddressBook_Person::_internal_phones_size() const {
  return _impl_.phones_.size();
}
inline int AddressBook_Person::phones_size() const {
  return _internal_phones_size();
}
inline void AddressBook_Person::clear_phones() {
  _impl_.phones_.Clear();
}
inline ::AddressBook_Person_PhoneNumber* AddressBook_Person::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:AddressBook.Person.phones)
  return _impl_.phones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person_PhoneNumber >*
AddressBook_Person::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:AddressBook.Person.phones)
  return &_impl_.phones_;
}
inline const ::AddressBook_Person_PhoneNumber& AddressBook_Person::_internal_phones(int index) const {
  return _impl_.phones_.Get(index);
}
inline const ::AddressBook_Person_PhoneNumber& AddressBook_Person::phones(int index) const {
  // @@protoc_insertion_point(field_get:AddressBook.Person.phones)
  return _internal_phones(index);
}
inline ::AddressBook_Person_PhoneNumber* AddressBook_Person::_internal_add_phones() {
  return _impl_.phones_.Add();
}
inline ::AddressBook_Person_PhoneNumber* AddressBook_Person::add_phones() {
  ::AddressBook_Person_PhoneNumber* _add = _internal_add_phones();
  // @@protoc_insertion_point(field_add:AddressBook.Person.phones)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person_PhoneNumber >&
AddressBook_Person::phones() const {
  // @@protoc_insertion_point(field_list:AddressBook.Person.phones)
  return _impl_.phones_;
}

// -------------------------------------------------------------------

// AddressBook

// repeated .AddressBook.Person people = 1;
inline int AddressBook::_internal_people_size() const {
  return _impl_.people_.size();
}
inline int AddressBook::people_size() const {
  return _internal_people_size();
}
inline void AddressBook::clear_people() {
  _impl_.people_.Clear();
}
inline ::AddressBook_Person* AddressBook::mutable_people(int index) {
  // @@protoc_insertion_point(field_mutable:AddressBook.people)
  return _impl_.people_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person >*
AddressBook::mutable_people() {
  // @@protoc_insertion_point(field_mutable_list:AddressBook.people)
  return &_impl_.people_;
}
inline const ::AddressBook_Person& AddressBook::_internal_people(int index) const {
  return _impl_.people_.Get(index);
}
inline const ::AddressBook_Person& AddressBook::people(int index) const {
  // @@protoc_insertion_point(field_get:AddressBook.people)
  return _internal_people(index);
}
inline ::AddressBook_Person* AddressBook::_internal_add_people() {
  return _impl_.people_.Add();
}
inline ::AddressBook_Person* AddressBook::add_people() {
  ::AddressBook_Person* _add = _internal_add_people();
  // @@protoc_insertion_point(field_add:AddressBook.people)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AddressBook_Person >&
AddressBook::people() const {
  // @@protoc_insertion_point(field_list:AddressBook.people)
  return _impl_.people_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AddressBook_Person_PhoneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AddressBook_Person_PhoneType>() {
  return ::AddressBook_Person_PhoneType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_my_5fmessage_2eproto
